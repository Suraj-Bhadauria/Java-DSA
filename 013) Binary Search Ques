Q1. CEILING OF A NUMBER
// CEILING is the smallest element in array greater than or equal to target
// FLOOR is the greatest element in array less than or equal to target

public class a_ceilingOfANumber {
    public static void main(String[] args) {
      
        int[] arr = {2,3,5,9,14,16,18};
        int target = 15;                    
        int ans = ceil(arr, target);
        System.out.println(ans);
      
        
    }
    

    //return the index : smallest numbr >=target
    static int ceil(int arr[], int target){

        //but what if the target is greater than the greatest number in the array
        if (target > arr[arr.length - 1]) {
            return -1;
        }

        int start=0;
        int end = arr.length-1;

        
        while(start<=end){

            int mid = start + (end-start)/2;

                if(target<arr[mid]){
                end = mid -1;
            }

            else if(target>arr[mid]){
                start = mid +1;
            }

            else {
                return mid;
            }

            
        }

        
            return start;
        
    }
}



Q2. FLOOR OF A NUMBER
public class b_floor {
    public static void main(String[] args) {
        int[] arr = {2,3,5,9,14,16,18};
        int target = 15;                    
        int ans = floor(arr, target);
        System.out.println(ans);
      
        
        
    }

    //return the index : greatest numbr <=target
    static int floor(int arr[], int target){
        int start=0;
        int end = arr.length-1;

        

        while(start<=end){

            int mid = start + (end-start)/2;

            if(target<arr[mid]){
                end = mid -1;
            }

            else if(target>arr[mid]){
                start = mid +1;
            }

            else {
                return mid;
            }
    
        }
    
            return end;
        
    }
    
}



Q3. FIND SMALLEST LETTER GREATER THAN TARGET
//Find smallest letter Greater than target
public class c {
    public static void main(String[] args) {
        char[] letters = {'a', 'c', 'd', 'e'};
        char target = 'd';
        char ans = smallestLetter(letters, target);
        System.out.println(ans);
    
    }

    static char smallestLetter(char[] letters, char target){
        int start=0;
        int end = letters.length - 1;

        while(start<=end){
            int mid = start + (end-start)/2;
            if (target < letters[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }


        }

        return letters[start % letters.length];
    }
    
}



Q4.FIND FIRST AND LAST POSITION OF ELEMENT IN SORTED ARRAY
//Find first and last position of element in Sorted Array   (BS)
import java.util.Arrays;

public class d {
    public static void main(String[] args){
        int[] arr = {1,2,4,5,8,8,8,8,8,9};
        int target = 8;
        int answ[] = position(arr, target);
        System.out.println(Arrays.toString(answ));

    }

    static int[] position(int[] nums, int target){

        int[] ans = {-1,-1};
        
        //check for first occurrence of target

        ans[0]= search(nums, target, true);
        if(ans[0]!=-1){ ans[1]=search(nums, target, false); }
   
        
       
        return ans;
       
    }

    static int search(int[] nums, int target, boolean findStartIndex){
        int ans = -1;
        int start=0;
        int end = nums.length - 1;

        while(start<=end){
            int mid = start + (end-start)/2;

            //first pos
            if(target<nums[mid]){
                end = mid-1;
            }
            else if(target>nums[mid]){
                start=mid+1;
            }

            else{
                //potential ans found
                ans= mid;
                if(findStartIndex){end=mid-1;}
                else{start=mid+1;}
            }
        }

        return ans;
    }

    
}



Q5.FIND POSTIION OF AN ELEMENT IN INFINITE ARRAY
//Find the position of an element in infinite array
//cannot use length function
//basically checking for the elements in chunks
//these chunks start from 0th element and gets doubled while traversing array
//It is the opposite steps of binary search algo
// therefore, total steps will be logN only
//it's just the reverse case.

public class e_infiniteArray {
    public static void main(String[] args) {
        int arr[] = {3,5,7,9,10,90,100,130,140,160,170  };
        int target = 10;
        System.out.println(ans(arr,target));
        
    }

    static int ans(int[] arr, int target){
        //first find the range
        //first start with a box of 2
        int start = 0;
        int end = 1;

        //condition for the target to lie in the range
        while(target>=arr[end]){
            int temp = end +1; //this is my new start
            //double the box size
            //end = previousEnd + sizeOfBox*2;
            end= end + (end-start+1)*2;
            start=temp;
        }

        return binarySearch(arr, target, start, end);
    }



    static int binarySearch(int[] arr, int target, int start, int end){
        while(start<=end){
            int mid = start + (end-start)/2;
            if(target<arr[mid]){end= mid-1;}
            else if(target>arr[mid]){start=mid+1;}
            else{return mid;}
        }
        return -1;
    }
    
}




Q6. PEAK INDEX IN A MOUNTAIN ARRAY 
//A mountain array is literally a mountain array
//first increases, then decreases
//also called bitonic array
//Q. Find peak in mountain array

public class f {
    public static void main(String[] args) {
        int[] arr = {2,4,5,6,7,8,5,4,2,1};
        int ans = mountain(arr);
        System.out.println(ans);
        
    }

    static int mountain(int[] arr){
        int start = 0;
        int end = arr.length -1;

        while(start<end){
            int mid = start + (end-start)/2;

         
            
            //mid element in descending part
            if(arr[mid]>arr[mid+1]){
                end = mid ;                                     //this maybe ans, but look at left 
            }

            else{
                //you are in ascending part of array
                start = mid+1;  //bcoz we know mid+1 is greater than mid element
                 }

        // in the end, start == end and pointing to the largest number because of the 2 checks above
        // start and end are always trying to find max element in the above 2 checks
        // hence, when they are pointing to just one element, that is the max one because that is what the checks say
        // more elaboration: at every point of time for start and end, they have the best possible answer till that time
        // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans

            
        }

        return start;      
    }
}




Q7.FIND IN MOUNTAIN ARRAY
public class g {
    public static void main(String[] args) {

    }
    // https://leetcode.com/problems/find-in-mountain-array/
    int search(int[] arr, int target) {
        int peak = peakIndexInMountainArray(arr);
        int firstTry = orderAgnosticBS(arr, target, 0, peak);
        if (firstTry != -1) {
            return firstTry;
        }
        // try to search in second half
        return orderAgnosticBS(arr, target, peak+1, arr.length - 1);
    }

    public int peakIndexInMountainArray(int[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while (start < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] > arr[mid+1]) {
                // you are in dec part of array
                // this may be the ans, but look at left
                // this is why end != mid - 1
                end = mid;
            } else {
                // you are in asc part of array
                start = mid + 1; // because we know that mid+1 element > mid element
            }
        }
        // in the end, start == end and pointing to the largest number because of the 2 checks above
        // start and end are always trying to find max element in the above 2 checks
        // hence, when they are pointing to just one element, that is the max one because that is what the checks say
        // more elaboration: at every point of time for start and end, they have the best possible answer till that time
        // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans
        return start; // or return end as both are =
    }

    static int orderAgnosticBS(int[] arr, int target, int start, int end) {
        // find whether the array is sorted in ascending or descending
        boolean isAsc = arr[start] < arr[end];

        while(start <= end) {
            // find the middle element
//            int mid = (start + end) / 2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            if (isAsc) {
                if (target < arr[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (target > arr[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        }
        return -1;
    }
}




Q8. SEARCH IN ROTATED SORTED ARRAY
//Q. Search in Rotated Sorted Array
public class h {
    public static void main(String[] args) {
        int[] arr={4,5,6,7,0,1,2};
        System.out.println(findPivot(arr));
        
    }

    public int Search(int[] nums, int target){
        int pivot = findPivot(nums);

        //if you didn't find pivot, it means array not rotated
        if(pivot==-1){
            //performing normal binary search
            return binarySearch(nums, target,0, nums.length-1);
        }

        //if pivot found, you have 2 asc sorted arrays
        if(nums[pivot]==target){return pivot;}
        if(target>=nums[0]){return binarySearch(nums, target, 0, pivot-1);}
       return binarySearch(nums, target, pivot+1, nums.length-1);
    }
    
    //this will not work in duplicate values
    static int findPivot(int[] arr){
        int start =0;
        int end = arr.length - 1;

        while(start<=end){
            int mid = start + (end-start)/2;
            //4cases over here

            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            if(arr[mid]<=arr[start]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return -1;
        
    }

    //Rotated array with duplicates
    static int findPivotWithDuplicates(int[] arr){
        int start =0;
        int end = arr.length - 1;

        while(start<=end){
            int mid = start + (end-start)/2;
            //4cases over here

            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }

            //if elements at middle, start,end are equal then just skip the duplicates
            if(arr[start]==arr[mid] && arr[mid]==arr[end]){
                //skip the duplicates

                //NOTE: what if these elements at start and at end were the pivots??
                //check if start is pivot
                if(arr[start]>arr[start+1]){return start;}
                start++;

                //check whether end is pivot
                if(arr[end]<arr[end-1]){return end-1;}
                end--;

            }

            //left side is sorted so, pivot should be in right
            else if(arr[start]<arr[mid] || arr[start]==arr[mid] && arr[mid]>arr[end]){
                start =mid+1;
            }
            else{end = mid-1;}
        }
        return -1;
        
    }

    static int binarySearch(int[] arr, int target,int start, int end){
       

        while(start<=end){
            int mid = start + (end-start)/2;
            if(target<arr[mid]){
                end=mid-1;
            }
            if(target>arr[mid]){
                start=mid+1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
}




Q9. FIND THE ROTATION COUNT IN ROTATED SORTED ARRAY
//Q. Find the Rotation Count in Rotated sorted Array
public class i {
    public static void main(String[] args) {
        int[] arr = {4,5,6,7,0,1,2};
        System.out.println(count(arr));
        
    }
    

    static int count(int[] arr){
       int pivot = findPivot(arr);
    
       return pivot+1;
    }

     //this will not work in duplicate values
     static int findPivot(int[] arr){
        int start =0;
        int end = arr.length - 1;

        while(start<=end){
            int mid = start + (end-start)/2;
            //4cases over here

            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            if(arr[mid]<=arr[start]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return -1;
        
    }

    //Rotated array with duplicates
    static int findPivotWithDuplicates(int[] arr){
        int start =0;
        int end = arr.length - 1;

        while(start<=end){
            int mid = start + (end-start)/2;
            //4cases over here

            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }

            //if elements at middle, start,end are equal then just skip the duplicates
            if(arr[start]==arr[mid] && arr[mid]==arr[end]){
                //skip the duplicates

                //NOTE: what if these elements at start and at end were the pivots??
                //check if start is pivot
                if(arr[start]>arr[start+1]){return start;}
                start++;

                //check whether end is pivot
                if(arr[end]<arr[end-1]){return end-1;}
                end--;

            }

            //left side is sorted so, pivot should be in right
            else if(arr[start]<arr[mid] || arr[start]==arr[mid] && arr[mid]>arr[end]){
                start =mid+1;
            }
            else{end = mid-1;}
        }
        return -1;
        
    }
}




Q10. GOOGLE DIFF QUES 
    do it
