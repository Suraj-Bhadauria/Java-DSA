import java.util.ArrayList;
import java.util.Arrays;
public class j {
    public static void main(String[] args) {
        // System.out.println(count(33, 33));
        // paths("", 3, 3);
        // System.out.println(pathsAL("", 3, 3));;
        // System.out.println(pathsdiagonal("", 3, 3));
        boolean[][] board = {
            {true,true, true},
            {true,true, true},
            {true,true, true},
        };
        // pathRestrictions("", board, 0, 0);
        // allPaths("", board, 0, 0);
        
        int[][] path = new int[board.length][board[0].length];
        allPathPrint("", board, 0, 0, path, 1);
        
    }

    
    //counting paths
    static int count(int row, int col){
        if(row == 1 || col == 1){return 1;}

        int left = count(row-1, col);
        int right = count(row, col-1);

        return left+right;
    }


    //printing paths
    static void paths(String p, int row, int col){
        if(row == 1 && col == 1){
            System.out.println(p);
            return;
        }

        if(row>1){paths(p+'D', row-1, col);} 
        if(col>1){paths(p+'R',row, col-1);}
    }


    static ArrayList<String> pathsAL(String p, int row, int col){
        if(row == 1 && col == 1){
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }

        ArrayList<String> ans = new ArrayList<>();

        if(row>1){ans.addAll(pathsAL(p+'D', row-1, col));} 
        if(col>1){ans.addAll(pathsAL(p+'R',row, col-1));}
        
        return ans;
    }


    //including diagonal paths
    static ArrayList<String> pathsdiagonal(String p, int row, int col){
        if(row == 1 && col == 1){
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }

        ArrayList<String> ans = new ArrayList<>();

        if(row>1 && col>1 ){ans.addAll(pathsdiagonal(p+'D', row-1, col-1));} //reducing both horizontal and vertical cols
        if(row>1){ans.addAll(pathsdiagonal(p+'V', row-1, col));} 
        if(col>1){ans.addAll(pathsdiagonal(p+'H',row, col-1));}
        
        return ans;
    }


    //maze with obstacles
    //-> when you land on a new cell, check whether it is a river or not
    //-> if you land on a river, stop recursion for that call; just return from there
    //-> its not Backtracking, it's just stopping the recursion at that point
    static void pathRestrictions(String p, boolean [][] maze, int row, int col){
        if(row == maze.length-1 && col == maze[0].length-1){
            System.out.println(p);
            return;
        }

        // if(maze[row][col]== false){return;}
        if(!maze[row][col]){return;}


        //note this sign: '<' below and '+' 
        if(row<maze.length-1){pathRestrictions(p+'D', maze, row+1, col);} 
        if(col<maze[0].length-1){pathRestrictions(p+'R',  maze, row, col+1);}
    }


    //in all directions
    //do not move back the same path
    //-> how to solve?
    //-> All cells that are visited,mark them as false so that they will never be visited
    //-> following code will give stackOverFlow error, will run endless recursion calls(without backtracking)
    //-> common sense : marking false == i have that cell in my current path
    //-> So when that path is over,   
    //-> so while you are moving back, you restore the maze AS IT WAS   , this going back occurs when func returns(very basic rec concept)
    //-> When you come out of the recursive function -> you are now in above rec call. Hence remark the cell as TRUE.
    //-> This is known as BACKTRACKING.
    //-> BACKTRACKING - you are making some changes while going in the below recursion calls, so when you go outside those recurions calls, the changes that were made by those recursion calls should also not be available.
    //-> backtracking intuition -> make a change, reverse the change when that work is done
    static void allPaths(String p, boolean [][] maze, int row, int col){
        if(row == maze.length-1 && col == maze[0].length-1){
            System.out.println(p);
            return;
        }

        // if(maze[row][col]== false){return;}
        if(!maze[row][col]){return;}

        //I am considering this block in my path
        maze[row][col]= false;


        //note this sign: '<' below and '+' 
        if(row<maze.length-1){allPaths(p+'D', maze, row+1, col);} 
        if(col<maze[0].length-1){allPaths(p+'R',  maze, row, col+1);}
        if(row>0){allPaths(p+'U',  maze, row-1, col);}   //while going up
        if(col>0){allPaths(p+'L',  maze, row, col-1);}   //while going left

        //this line is where the function will be over
        //so before the function gets removed, also remove the changes that were made by that funcn
        maze[row][col] = true;
    }
    
 //!!!!!! LOOK INTO THIS
    //printing actual path in form of 2d array representation; + path(eg uudd)
    /*
    -> take a step variable
    -> update it in the path array
    -> print it in base condn
    -> backtrack
     */
      static void allPathPrint(String p, boolean[][] maze, int r, int c, int[][] path, int step) {
        if (r == maze.length - 1 && c == maze[0].length - 1) {
            path[r][c] = step;
            for(int[] arr : path) {
                System.out.println(Arrays.toString(arr));
            }
            System.out.println(p);
            System.out.println();
            return;
        }

        if (!maze[r][c]) {
            return;
        }

        // i am considering this block in my path
        maze[r][c] = false;
        path[r][c] = step;
        if (r < maze.length - 1) {
            allPathPrint(p + 'D', maze, r+1, c, path, step+1);
        }

        if (c < maze[0].length - 1) {
            allPathPrint(p + 'R', maze, r, c+1, path, step+1);
        }

        if (r > 0) {
            allPathPrint(p + 'U', maze, r-1, c, path, step+1);
        }

        if (c > 0) {
            allPathPrint(p + 'L', maze, r, c-1, path, step+1);
        }

        // this line is where the function will be over
        // so before the function gets removed, also remove the changes that were made by that function
        maze[r][c] = true;
        path[r][c] = 0;
    }



} 
