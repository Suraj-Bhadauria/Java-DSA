import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class g {
    public static void main(String[] args) {
        // skip1("", "baccasd");
        // System.out.println(skip2("baccasd"));;
        // System.out.println(skipApple("Iloveapple"));
        // subseq("", "abc");
        // System.out.println(subseq2("", "abc"));
        // subseqAscii("", "abc");;
        // System.out.println(subseqAscii2("", "abc"));
        // int[] arr = {1,2,3};
        // List<List<Integer>> ans = subset(arr);
        // for(List<Integer> list : ans){
        //     System.out.println(list);
        // }
        int[] arr = {1,2,2 };
        List<List<Integer>> ans = subsetDuplicate(arr);
        for(List<Integer> list : ans){
            System.out.println(list);
        }

        
    }
   

    //basic string ques
    //q1. Given a string, return a string removing all 'a' from it.
    ///p-processed string ; up = unprocessed string
    static void skip1(String p, String up){
        if(up.isEmpty()){
            System.out.println(p);
            return;
        }

        char ch = up.charAt(0);

        if(ch == 'a'){skip1(p, up.substring(1));}
        else{skip1(p+ch, up.substring(1));}

    }


    static String skip2(String up){
        if(up.isEmpty()){
            return "";
        }

        char ch = up.charAt(0);

        if(ch == 'a'){return skip2(up.substring(1));}
        else{return ch + skip2(up.substring(1));}

    }

    //if you need to skip a string
    static String skipApple(String up){
        if(up.isEmpty()){return "";}

        if(up.startsWith("apple")){return skipApple(up.substring(5));}
        else{return up.charAt(0)+ skipApple(up.substring(1));}
    }


    //skip a string if it's not the required string
    static String skipAppNotApple(String up){
        if(up.isEmpty()){return "";}

        if(up.startsWith("app") && !up.startsWith("apple")){return skipAppNotApple(up.substring(3));}
        else{return up.charAt(0)+ skipAppNotApple(up.substring(1));}
    }
    


     /*
    #RECURISON SUBSET
    -> when dealing with PnC
    -> Subsets = Non-Adjacent collection
    -> eg [2,5,9] = [2],[5],[9],[2,5],[2,9],[5,9], [2,5,9]
    -> we will learn how to use subsets using recursion & iteration
    -> "abc"  => a, b, c, ab, bc, ca, abc
    vvi
    ->This pattern of taking some elements and removing some is known as subset pattern.
    -> subset for arrays
    -> subsequence for strings
     */

     static void subseq(String p, String up){
        if(up.isEmpty()){System.out.println(p); return;}
        
        char ch = up.charAt(0);

        subseq(p+ch, up.substring(1));
        subseq(p, up.substring(1));
     }

     //when storing these subsequences in AL
     static ArrayList<String> subseq2(String p, String up){
        if(up.isEmpty()){
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }
        
        char ch = up.charAt(0);
        ArrayList<String> left = subseq2(p+ch, up.substring(1));
        ArrayList<String> right = subseq2(p, up.substring(1));

        left.addAll(right);     //AL function
        return left;
     }

    //also printing ASCII value of the characters in that string in subsequences
    //we will just make three calls instead of two
    //To get ascii value of a char -> ch+0, where ch = 'a','b'etc


    static void subseqAscii(String p, String up){
        if(up.isEmpty()){System.out.println(p); return;}

        char ch = up.charAt(0);

        subseqAscii(p+ch, up.substring(1));
        subseqAscii(p, up.substring(1));
        subseqAscii(p+(ch+0), up.substring(1));
    }

    //printing is arraylist
    static ArrayList<String> subseqAscii2(String p, String up){
        if(up.isEmpty()){
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }
        
        char ch = up.charAt(0);
        ArrayList<String> first = subseqAscii2(p+ch, up.substring(1));
        ArrayList<String> second = subseqAscii2(p, up.substring(1));
        ArrayList<String> third = subseqAscii2(p+(ch+0), up.substring(1));

        first.addAll(second);     //AL function
        first.addAll(third);     //AL function
        return first;
     }


     //subset using ITERATION
    static List<List<Integer>> subset(int[] arr){
        List<List<Integer>> outer = new ArrayList<>();

        outer.add(new ArrayList<>()); //an empty list has been added in outer list, thus outer list has size of 1 

        for(int num : arr){
            int n = outer.size();
            for(int i=0; i<n; i++){
                List<Integer> internal = new ArrayList<>(outer.get(i));   //now this internal will be a copy of outer at that i//this is a constructor used in AL
                internal.add(num);
                outer.add(internal);
            }
        }
        return outer;
    }
    /*
    -> TIME compl : O(N * 2^N)
    -> space compl : O(2^N(total subsets) * N(space taken by each subset))


    -> When you find a duplicate element in a subset ques (eg 1,2,2)
    -> only add it in the newly created subset of previous step
    -> because of above point, duplicates have to be together - sort the array
     */

    //duplicates present  
     static List<List<Integer>> subsetDuplicate(int[] arr){
        Arrays.sort(arr);
        List<List<Integer>> outer = new ArrayList<>();

        outer.add(new ArrayList<>()); //an empty list has been added in outer list, thus outer list has size of 1 
        int start=0;
        int end=0;
        for(int i=0; i<arr.length; i++){
            start = 0;
            //if current and previous element is same, s=e+1
            if(i>0 && arr[i]==arr[i-1]){start = end + 1;}
            end = outer.size()-1;
            int n = outer.size();
            for(int j=start; j<n; j++){
                List<Integer> internal = new ArrayList<>(outer.get(i));   //now this internal will be a copy of outer at that i//this is a constructor used in AL
                internal.add(arr[i]);   
                outer.add(internal);
            }
        }
        return outer;
    }


}
