Q1.
import java.util.Arrays;

public class e_q1 {
    public static void main(String[] args) {
        int[] nums = {5,4,2,1,3};
        cyclic(nums);
        System.out.println(Arrays.toString(nums));
        System.out.println(find(nums));
       

    }

    static void cyclic(int[] arr){
        for(int i=0; i<arr.length; i++){
            if(arr[i]<arr.length && arr[i] != i){swap(arr, i, arr[i] );}
            
        }
    }

    

    static int find(int[] arr){
        for(int i=0; i<arr.length; i++){
            if(arr[i]!=i){return i;}
        }
        return arr.length;  //if N is not in array 
    }                       // this means array will be sorted and each index will have correct order also

    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first]=arr[second];
        arr[second]=temp;
    } 
}




Q2.
import java.util.ArrayList;
import java.util.Arrays;
public class f_q2 {
    public static void main(String[] args) {
        int[] nums = {4,3,2,7,8,2,3,1};
        cyclic(nums);
        // System.out.println(Arrays.toString(nums));
         System.out.println(Arrays.toString(notpresent(nums)));


        }
        
    

    static void cyclic(int[] arr){
        // if(findZero(arr)){
        //     for(int i=0; i<arr.length; i++){
        //         if(arr[i]<arr.length && arr[i]!=arr[arr[i]] && arr[i]!=i){
        //             swap(arr,i,arr[i]);
        //         }
        //     }
        // }

       int i=0;
       while (i<arr.length) {
        int correct = arr[i]-1;
        if(arr[i]!=arr[correct]){swap(arr, i, correct);}
        else{i++;}

        
       }    
    }

    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first]=arr[second];
        arr[second]=temp;
    }
    
    // static boolean findZero(int[] arr){
    //     for(int i=0; i<arr.length; i++){
    //         if(arr[i]==0){return true;}
    //     }
    //     return false;
    // }

    static int[] notpresent(int[] arr){
        ArrayList<Integer> full = new ArrayList<>();
        for(int i=0; i<arr.length; i++){
            if((arr[i]-1) != i){
                full.add(i+1);
            }

        }
        int[] result = new int[2];
        result[0] = full.get(0);
        result[1] = full.get(full.size()-1);

        return result;

    }
}




Q3. FIND THE DUPLICATE NUMBER
//Q. FIND THE DUPLICATE NUMBER
import java.util.Arrays;
public class g_q3 {
    public static void main(String[] args) {
        int[] nums = {1,3,4,2,2};
        cyclic(nums);
        System.out.println(result(nums));
    }

    static void cyclic(int[] arr){
        int i=0;
        while(i<arr.length){
            int correctind= arr[i]-1;
            if(arr[i] != arr[correctind]){swap(arr, i, correctind);}
            else{i++;}
        }
    }

    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first]=arr[second];
        arr[second]=temp;
    }

    static int result(int[] arr){
        for(int i=0; i<arr.length; i++){
            if(arr[i]-1 != i){return arr[i];}

        }
        return -1;
    }
    
}




Q4.FIND ALL DUPLICATES IN ARRAY
//Q.FIND ALL DUPLICATES IN ARRAY
import java.util.ArrayList;
import java.util.Arrays;
public class h_q4 {
    public static void main(String[] args) {
        int[] nums = {4,3,2,7,8,2,3,1};
        cyclic(nums);
        System.out.println(result(nums));
        // System.out.println(Arrays.toString(nums));
        
    }

    static void cyclic(int[] arr){
        int i=0;
        while(i<arr.length){
            int correctindex = arr[i]-1;
            if(arr[i] != arr[correctindex]){swap(arr, i, correctindex);}
            else{i++;}
        }
    }

    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    static ArrayList<Integer> result(int[] arr){
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=0; i<arr.length; i++ ){
            if(arr[i]-1 != i){
                res.add(arr[i]);
            }
        }
        return res;
    }
}




Q5.SET MISMATCH
//Q. SET MISMATCH
public class g_q5 {
    public static void main(String[] args) {
        
    }

    static void cyclic(int[] arr){
        int i=0;
        while(i<arr.length){
            int correctindex = arr[i]-1;
            if(arr[i] != arr[correctindex]){swap(arr, i, correctindex);}
            else{i++;}
        }
    }

    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}




Q6.FIRST MISSING POSITIVE
//first missing positive

import java.util.Arrays;
public class i_q6 {
    public static void main(String[] args) {
        // int[] array = {3,4,2,1};
        int[] array = {3,4,-1,1};
        cyclic(array);
        // System.out.println(Arrays.toString(array));
        System.out.println(find(array));
    }

    static void cyclic(int[] arr){
        int i=0;
        while(i<arr.length){
            int correctindex = arr[i]-1;
            if(arr[i]>0 && arr[i]<arr.length && arr[i] != arr[correctindex] ){
                swap(arr, i, correctindex);
            }
            else{i++;}

        }
        
    }

    static int find(int[] arr){
        for(int i=0; i<arr.length; i++){
            if(arr[i]-1 != i){return i+1;}
        }
        return arr.length+1;
    }

    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first]=arr[second];
        arr[second]=temp;
    }
    
}

