Q1.ROW COL MATRIX
//searching in 2D array
//matrix is not strictly sorted
import java.util.Arrays;

public class rowColMatrix {
    public static void main(String[] args) {
        int[][] arr ={
            {10,20,30,40},
            {15,25,35,45},
            {28,29,37,49},
            {33,34,38,50},
        };

        System.out.println(Arrays.toString(search(arr, 49 )));
        
    }

    static int[] search(int[][] matrix, int target){
        int r=0;                                                            //start from first row // means initialised from
        int c=matrix.length-1;                                              //start from last col  // top right corner  

        while(r<matrix.length && c>=0){
            if(matrix[r][c] == target){return new int[] {r,c};}
            if(matrix[r][c]<target){r++;}
            else{c--;}
        }

        return new int[] {-1,-1};

    }
    
}




Q2. STRICTLY SORTED MATRIX
//strictly sorted matrix

import java.util.Arrays;

public class sortedMatrix {
    public static void main(String[] args) {
        int[][] arr = {
            {1,2,3},
            {4,5,6},
            {7,8,9},
        };

        System.out.println(Arrays.toString(search(arr, 9)));
        
    }

    static int[] search(int[][] matrix, int target){
        int rows = matrix.length;
        int cols = matrix[0].length;                    //be cautious matrix maybe empty

        if(rows==1){
            return binarySearch(matrix, 0, 0, cols-1, target) ;   
        }

        int rStart = 0;
        int rEnd = rows-1;
        int cMid = cols/2;
        //run the loop till two rows are remaining
        while(rStart < (rEnd-1)){ //while this is true, it will have more than 2 rows
            int rMid = rStart + (rEnd-rStart)/2;
            if(matrix[rMid ][cMid]==target){return new int[] {rMid, cMid};}
            if(matrix[rMid ][cMid]< target){rStart = rMid;}
            if(matrix[rMid ][cMid]> target){rEnd = rMid;}

            //now we have two rows
            //check whether the target is in the col of two rows
            if(matrix[rStart][cMid]==target){return new int[] {rStart, cMid};}
            else if(matrix[rEnd][cMid]==target){return new int[] {rEnd, cMid};}
            //else if(matrix[rStart+1][cMid]==target){return new int[] {rStart+1, cMid};}
            
            //search in 1st half 
            if(target<=matrix[rStart][cMid-1]){
                return binarySearch(matrix, rStart, 0, cMid-1, target);   
            }
            //search in 2nd half 
            if(target>=matrix[rStart][cMid+1] && target<=matrix[rStart][cols-1]){
                return binarySearch(matrix, rStart, cMid+1, cols-1, target);
            }
            //search in 3rd half 
            if(target<=matrix[rStart+1][cMid-1]){
                return binarySearch(matrix, rStart+1, 0, cMid-1, target);
                
            }
            //search in 4th half 
            else {
                return binarySearch(matrix, rStart+1, cMid+1, cols-1, target);
            }
            

            



        }
        return new int[] {-1,-1};

    }


    //search in the row provided b/w the cols provided
    //as we are searching from column 'a' to column 'b'
    static int[] binarySearch(int[][]matrix, int row, int cStart, int cEnd, int target){
        while(cStart<=cEnd){
            int mid = cStart + (cEnd-cStart)/2;

            if(matrix[row][mid] == target){return new int[] {row,mid};}
            if(matrix[row][mid] < target){cStart = mid+1;}
            if(matrix[row][mid] > target){cEnd = mid-1;}
        }
        return new int[] {-1,-1};
        
    }
    
    
}

