/*
INSERTION SORT

for every index:
put that index element at the correct index of LHS.

Time comp:
Worst case : O(n**2)
Best case : O(n)

Why use it:
1) Adaptive : Steps get reduced if array is sorted
              No. of swaps reduced as compared to Bubble sort
2) Stable
3)Used for smaller values of N. works good when array is partially sorted. this is why it takes part in Hybrid Sorting Algorithm


 */

import java.util.Arrays;
public class c_insertion_sort {
    public static void main(String[] args) {
        int[] nums = {5,4,3,2,1};
        insertion(nums);
        System.out.println(Arrays.toString(nums));
        
    }

    static void insertion(int[] arr){
        for(int i=0; i<(arr.length-1); i++){
            for(int j=(i+1); j>0; j--){
                if(arr[j]<arr[j-1]){swap(arr, j, j-1);}
               else{break;}
            }
        }
    }


    //SWAP func
    static void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
    
}
