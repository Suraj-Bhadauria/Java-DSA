//BIT MANIPULATION
/*
OPERATORS
1)AND
application
Q. Whether a number N is even or odd
When you & 1 with any numbe, digits remain the same.

2) OR
3) XOR  (^) (if and only if one is true)
    observations 
    a ^ 1 = a'(complement)
    a ^ 0 = a
    a ^ a = 0

4) COMPLEMENT (~)


NUMBER SYSTEMS
1. Decimal - base 10
2. Binary - base 2
3. Octal - base 8
4. Hexadecimal - base 16


5) LEFT SHIFT OPERATOR(<<)
eg:-
(10)10 = (1010)2
operation 10<<1
step: 1010 << 1
      10100
appln -> a<<1 = 2a
gen note - a<<b = a*2powb 

6) RIGHT SHIFT OPERATOR(>>)
eg - 0011001 >> 1 -> 001100
appln, gen result -> a>>b = a/2powb
 */


/*
QUESTIONS
Q1. Given a number N, find whether its even or odd.
note - every no is calculated in binary internally
if 2pow0 is 0 then no is even else its odd bcoz rest other digits in binary number are even



 */
public class a_maths {
    public static void main(String[] args) {
        // int n = 68;
        // System.out.println(isOdd(n));


        //q2.
        int[] arr = {2,3,3,4,2,6,4};
        System.out.println(ans(arr));

    }

    static boolean isOdd(int n){
        return (n & 1) ==1; 
    }
    



/*Q2. IN an array, every number appears twice, only one number appears once. find that number
Ans.  XOR All the elements.
*/
    static int ans(int[] arr){
        int unique = 0;
        for(int n:arr){
            unique ^= n;
        }
        return unique;
    }


/*
Q3. Find ith bit of a number.
eg - 10110110
use AND and left shift
Q4. Set the ith bit. turn it to 1.
use OR
Q5. Reset ith bit. turn it to 0
AND everything with 1 and ith bit with 0

Q6. Find the position of the rightmost set bit.
eg - 10110110



*/
}


--BREAK--



//QUESTIONS
/*
Q1.
 */
public class b {
    public static void main(String[] args) {

        // //q2.
        // int n = 5;
        // System.out.println(magicnumber(n)); 
        
        // //q3.
        // int n= 10;
        // int b = 2;
        // System.out.println(numberofdigits(n, b));

        // //q4.
        // int n = 250;
        // System.out.println(poweroftwo(n));

    //     //q6.
    //     int base = 2;
    //     int power = 5;
    //     System.out.println(pow(base, power));
    // }

    //Q8.
    int a = 3, b=9;
    System.out.println(XORinrange(a, b));
}


/*
Q1.Every number is appearing n times, only one number is appearing one time.
 */

/*
Q2.Find the nth magic number
    1 = 001 = take power of 5 as each value = 5pow3+ 5pow2 + 5pow1 = 5
    2 = 010 =  5pow3 + 5pow2 + 5pow1 = 25
    3 = 011 =                        = 25 + 5 = 30
 */

static int magicnumber(int n){
    int ans =0;
    int base = 5;
    while(n>0){
        int last = n&1;
        n = n>>1;

        ans = ans + last*base;
        base = base*5;
    }
    return ans;
}

/*
Q3. Find no of digits in base b.
 */
static int numberofdigits(int n, int b){ //n is allways in decimal, b can be any base
    int ans = (int)(( Math.log(n)/ Math.log(b)) + 1);
    return ans;
}



/*
Q4. Pascal's triangle

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
Find the sum of nth row.
Ans. Sum of each row = nC0 + nC1 + nC2 + nC3 + ....+ nCn = 2pown
for nth row, sum = 2pow(n-1)
ans. 1<<(n-1)
 */

/*
Q5. Given a number , find out whether it is power of 2 or not.
Ans. It should contain only one 1.
 */

//using bitwise operator
static boolean poweroftwo(int n){
    int count = 0;
    while(n>0){
        int lastdig = n & 1;
        if(lastdig == 1){count ++;}
        n = n>>1;
    }
    if(count == 1){return true;}
    return false;
}


/*
Q6. Calculate apowb
eg - 3pow6
 */
static int pow(int base, int power){
    int ans = 1;
    while(power>0){
        if((power & 1)==1){ans = ans * base;}
        base = base*base;
        power = power>>1;
        
    }
    return ans;
}

/*
Q7. Find xor of nos from  0 to a.
 */

//Q8. XOR in range
static int XORinrange(int a, int b){
    //range xor for a,b = xor b ^ xor(a-1)
    int ans = xor(b) ^ xor(a-1);
    return ans;


}

//this gives xor from 0 to a
static int xor(int a){
     if(a%4==0){
        return a;
     }

     if(a%4==1){
        return 1;
     }
     if(a%4==2){
        return a+1;
     }
     
        return 0;
     

}





}




--BREAK --



/*
//FLIPPING AN IMAGE  
 */


public class c {
    public static void main(String[] args) {
        
    }

    static int[][] flipinvertimage(int [][] image){
        for(int[] row: image){
            //reverse this array
            for(int i=0; i<(image[0].length + 1)/2; i++){
                //swap
                int temp = row[i] ^ 1;
                row[i]=row[image[0].length - i -1] ^ 1;
                row[image[0].length - i -1] = temp;
            }
           
        }
        return image;
    }
    

}
